# Задание 1: Видеокарты
# В базе магазина электроники есть список видеокарт компании NVIDIA разных
# поколений. Вместо полных названий хранятся только числа, которые обозначают
# модель и поколение видеокарты. Недавно компания выпустила новую линейку
# видеокарт. Самые старшие поколения разобрали за пару дней.
# Напишите программу, которая удаляет наибольшие элементы из списка видеокарт.

""" # Ввод количества видеокарт
videoСardsNumber = int(input('Введите количество видеокарт: '))
# Инициализация списка для хранения видеокарт
videoСards = []
newVideoCardsList = []
maxItem = 0
# Заполнение списка видеокарт и определение наибольшего элемента
for item in range(videoСardsNumber):
# Ввод номера видеокарты и добавление в список
    videoСards.append(int(input(f'Видеокарта {item + 1}: ')))
# Обновление значения максимального элемента
    if videoСards[item] > maxItem:
        maxItem = videoСards[item]
# Формирование нового списка без наибольших элементов
for item in range(videoСardsNumber):
    if videoСards[item] != maxItem:
        newVideoCardsList.append(videoСards[item])
# Вывод старого списка видеокарт
print()
print('Старый список видеокарт: [', end=' ')
for item in range(videoСardsNumber):
    print(videoСards[item], end=' ')
print(']')
# Вывод нового списка видеокарт
print('Новый список видеокарт: [', end=' ')
for item in range(len(newVideoCardsList)):
    print(newVideoCardsList[item], end=' ')
print(']') """


# Задача 2. Кино
# Илья зашёл на любительский киносайт, на котором пользователи оставляют
# рецензии на фильмы. Их список:
# films = [‘Крепкий орешек’, ‘Назад в будущее’, ‘Таксист’, ‘Леон’, ‘Богемская
# рапсодия’, ‘Город грехов’, ‘Мементо’, ‘Отступники’, ‘Деревня’]
# Илья на сайте в первый раз. Он хочет зарегистрироваться и сразу добавить
# часть фильмов в список любимых, чтобы позже прочитать рецензии на них.
# Напишите программу, в которой пользователь вводит фильм. Если кинокартина
# есть в перечне, то добавляется в список любимых. Если её нет, то выводится
# ошибка. В конце выведите весь список любимых фильмов.

""" films = ['Крепкий орешек', 'Назад в будущее', 'Таксист',
'Леон', 'Богемская рапсодия', 'Город грехов',
'Мементо', 'Отступники', 'Деревня']

favorite_films = []

films_count = int(input('Сколько фильмов хотите добавить? '))

for _ in range(films_count):
    movie = input('Введите название фильма: ')
    if movie in films:
        favorite_films.append(movie)
    else:
        print(f'Ошибка: фильма {movie} у нас нет :(')

print(f'\nВаш список любимых фильмов: {favorite_films}') """

# Задача 3. Сортировка
# Дан список из N чисел. Напишите программу, которая сортирует элементы
# списка по возрастанию и выводит их на экран. Дополнительный список
# использовать нельзя.
# Также нельзя использовать готовые функции sorted/min/max и метод sort
# Постарайтесь придумать и написать как можно более эффективный алгоритм
# сортировки.
# Пример:
# Изначальный список: [1, 4, –3, 0, 10]
# Отсортированный список: [–3, 0, 1, 4, 10]

""" # Исходный список чисел
original_list = [1, 4, -3, 0, 10]
# Вывод исходного списка
print('Изначальный список: ', original_list)
# Реализация сортировки пузырьком (Bubble Sort)
for i in range(len(original_list) - 1):
# Проход по всем элементам списка, за исключением уже отсортированных
    for j in range(len(original_list) - 1 - i):
# Сравнение текущего элемента с следующим
        if original_list[j] > original_list[j + 1]:
# Если текущий элемент больше следующего, меняем их местами
            original_list[j], original_list[j + 1] = original_list[j + 1], original_list[j]
# Вывод отсортированного списка
print('Отсортированный список: ', original_list) """


""" # Задача 4. Товары
# В базе данных магазина вся необходимая информация по товарам делится на
# два словаря: первый отвечает за коды товаров, второй — за списки количества
# разнообразных товаров на складе:

goods = {
'Лампа': '12345',
'Стол': '23456',
'Диван': '34567',
'Стул': '45678',
}
store = {
'12345': [
{'quantity': 27, 'price': 42},
],
'23456': [
{'quantity': 22, 'price': 510},
{'quantity': 32, 'price': 520},
],
'34567': [
{'quantity': 2, 'price': 1200},
{'quantity': 1, 'price': 1150},
],
'45678': [
{'quantity': 50, 'price': 100},
{'quantity': 12, 'price': 95},
{'quantity': 43, 'price': 97},
],
}
# Каждая запись второго словаря отображает, сколько и по какой цене
# закупалось товаров. Цена указана за одну штуку.
# Напишите программу, которая рассчитывает общую стоимость позиций для
# каждого товара на складе и выводит эту информацию на экран.

for item_name in goods.keys():
    item_code = goods[item_name]
    total_quantity = 0
    total_cost = 0
    for entry in store[item_code]:
        total_quantity += entry['quantity']
        total_cost += entry['price'] * entry['quantity']
    print('{} — {} штук, стоимость {} рубля(ей).'.format(item_name, total_quantity, total_cost)) """


""" # Задача 5. Пицца
# В базе данных интернет-магазина PizzaTime хранятся сведения о том, кто, что и
# сколько заказывал у них в определённый период. Вам нужно структурировать
# эту информацию и определить, сколько всего пицц купил каждый заказчик.
# На вход в программу подаётся N заказов. Каждый заказ представляет собой
# строку вида «Покупатель — название пиццы — количество заказанных пицц».
# Реализуйте код, который выводит список покупателей и их заказов по
# алфавиту. Учитывайте, что один человек может заказать одну и ту же пиццу
# несколько раз.



orders_count = int(input('Введите количество заказов: '))
database = dict()
for i_order in range(orders_count):
    customer, pizza_name, count = input(f'{i_order + 1} заказ: ').split()
    count = int(count)
    # Если покупатель еще не добавлен в словарь
    if customer not in database:
        # Добавляем покупателя и начальную запись о пицце
        database[customer] = {pizza_name: count}
    else:
        # Если покупатель уже есть
        if pizza_name in database[customer]:
            # Если пицца уже была заказана ранее, увеличиваем количество
            database[customer][pizza_name] += count
        else:
            # Если пицца новая для этого покупателя, добавляем запись
            database[customer][pizza_name] = count

# Сортируем список покупателей в алфавитном порядке и выводим информацию
for customer in sorted(database.keys()):
    print(f'{customer}:')
    # Сортируем пиццы по алфавиту и выводим информацию для каждого покупателя
    for pizza_name in sorted(database[customer].keys()):
        print(f'  {pizza_name}: {database[customer][pizza_name]}')
 """
